{"version":3,"sources":["components/Grid/Grid.js","components/Grid/index.js","components/hooks/useFetchMultipleQuery.js","components/hooks/useRedirectToPlanetsIfNoStateEffect.js","components/Films/Films.js","components/Films/index.js","components/Residents/Residents.js","components/Residents/index.js","assets/space.jpg","components/NotFoundPage/index.js","components/NotFoundPage/NotFoundPage.js","components/Planets/usePlanetsQuery.js","components/Planets/EditPlanetModal/TextField.js","components/Planets/EditPlanetModal/FormField.js","components/Planets/EditPlanetModal/TerrainField.js","components/Planets/EditPlanetModal/EditPlanetModal.js","components/Planets/EditPlanetModal/useEditPlanetFormik.js","components/Planets/Planets.js","components/Planets/index.js","components/Planets/allHeaders.js","components/Planets/allActions.js","components/Planet/Planet.js","components/Planet/index.js","components/Planet/usePlanetsQuery.js","routers/index.js","reportWebVitals.js","index.js"],"names":["numericStyles","type","textAlign","undefined","Grid","Component","data","header","values","actions","hasActions","length","striped","className","map","name","style","row","index","height","rowElement","label","action","show","color","onClick","icon","url","useFetchMultipleQuery","key","films","useQuery","Promise","allSettled","fetch","then","res","json","useRedirectToPlanetsIfNoStateEffect","location","history","useEffect","state","push","Films","useHistory","useLocation","query","promise","value","Residents","residents","backgroundImage","Bg","usePlanetsQuery","page","Number","fetchProjects","keepPreviousData","staleTime","cacheTime","TextField","children","placeholder","onChange","multiple","FormField","formik","itype","find","h","e","value1","target","console","log","setFieldValue","TerrainField","props","for","terrain","split","a","replaceAll","opt","opts","i","len","options","selected","join","s","EditPlanetModal","onClose","planet","useFormik","initialValues","validationSchema","Yup","shape","required","rotation_period","orbital_period","diameter","climate","gravity","surface_water","onSubmit","editedPlanet","formikHelpers","Math","random","alert","JSON","stringify","resetForm","useEditPlanetFormik","isOpen","toggle","handleSubmit","disabled","isValid","dirty","Planets","headers","useState","setPage","setPlanet","isFetching","allHeaders","id","allActions","results","Array","from","count","_","p","useParams","isLoading","queryClient","QueryClient","refetchOnMount","refetchOnReconnect","refetchInterval","refetchOnWindowFocus","refetchIntervalInBackground","Router","window","process","client","exact","path","component","render","Planet","NotFoundPage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57d52289.chunk.js","sourcesContent":["import { Button, Table } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nfunction numericStyles(type) {\n  return {\n    textAlign: type === \"number\" ? \"right\" : undefined,\n  };\n}\n\nfunction Grid({ data: { header = [], values = [], actions = [] } }) {\n  const hasActions = !!actions.length;\n  return (\n    <Table striped={true} className=\"gridTable\">\n      <thead>\n        <tr>\n          {header.map(({ name, type }) => {\n            return (\n              <th key={`${name}-header`} style={numericStyles(type)}>\n                {name} {type === \"number\" ? \"(number)\" : \"(string)\"}\n              </th>\n            );\n          })}\n          {hasActions && <th>Actions</th>}\n        </tr>\n      </thead>\n      <tbody>\n        {values.map((row, index) => {\n          return (\n            <tr key={row.url} style={{ height: 100 }}>\n              {header.map(({ name, type = \"string\" }) => {\n                let rowElement = row[name];\n                return (\n                  <td key={name} style={numericStyles(type)}>\n                    {type === \"array\" ? rowElement.length : rowElement}\n                  </td>\n                );\n              })}\n              {hasActions && (\n                <td className=\"gridActions\">\n                  {actions.map(({ label, action, show }) => {\n                    if (show) {\n                      if (!show(row)) {\n                        return null;\n                      }\n                    }\n                    return (\n                      <Button\n                        color={\"primary\"}\n                        key={`${label}-${index}`}\n                        onClick={() => action(row)}\n                        icon=\"navbar-toggler-icon\"\n                      >\n                        {label}\n                      </Button>\n                    );\n                  })}\n                </td>\n              )}\n            </tr>\n          );\n        })}\n      </tbody>\n    </Table>\n  );\n}\n\nGrid.propTypes = PropTypes.shape({\n  header: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n  values: PropTypes.arrayOf(PropTypes.any).isRequired,\n  actions: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      action: PropTypes.func.isRequired,\n      show: PropTypes.bool,\n    })\n  ),\n}).isRequired;\n\nexport default Grid;\n","import Component from \"./Grid\";\n\nexport default Component;\n","import { useQuery } from \"react-query\";\n\nexport function useFetchMultipleQuery(key, films = []) {\n  return useQuery([key, ...films], () =>\n    Promise.allSettled(films.map((url) => fetch(url).then((res) => res.json())))\n  );\n}\n","import { useEffect } from \"react\";\n\nexport function useRedirectToPlanetsIfNoStateEffect(location, history) {\n  useEffect(() => {\n    if (location.state === undefined) history.push(\"/\");\n  }, [location, history]);\n}\n","import Grid from \"../Grid\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useFetchMultipleQuery } from \"../hooks/useFetchMultipleQuery\";\nimport { useRedirectToPlanetsIfNoStateEffect } from \"../hooks/useRedirectToPlanetsIfNoStateEffect\";\nimport { Button } from \"reactstrap\";\n\nfunction Films() {\n  const history = useHistory();\n  const location = useLocation();\n  const query = useFetchMultipleQuery(\"films\", location.state?.films);\n  useRedirectToPlanetsIfNoStateEffect(location, history);\n  return (\n    <div className=\"App\">\n      <h1> Films that happen at {location.state?.name} Planet</h1>\n      <Grid\n        data={{\n          header: [{ name: \"title\" }, { name: \"director\" }, { name: \"url\" }],\n          values: query.data?.map((promise) => promise.value) || [],\n        }}\n      />\n      <Button onClick={() => history.push(\"/planets\")}>Back to Planets</Button>\n    </div>\n  );\n}\n\nexport default Films;\n","import Component from \"./Films\";\n\nexport default Component;\n","import Grid from \"../Grid\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useFetchMultipleQuery } from \"../hooks/useFetchMultipleQuery\";\nimport { useRedirectToPlanetsIfNoStateEffect } from \"../hooks/useRedirectToPlanetsIfNoStateEffect\";\nimport { Button } from \"reactstrap\";\n\nfunction Residents() {\n  const history = useHistory();\n  const location = useLocation();\n  const { data } = useFetchMultipleQuery(\n    \"residents\",\n    location.state?.residents\n  );\n  useRedirectToPlanetsIfNoStateEffect(location, history);\n  return (\n    <div className=\"App\">\n      <h1>Star Wars Residents from {location.state?.name}</h1>\n      <Grid\n        data={{\n          header: [\n            { name: \"name\" },\n            { name: \"skin_color\" },\n            { name: \"gender\" },\n            { name: \"eye_color\" },\n            { name: \"mass\", type: \"number\" },\n            { name: \"height\", type: \"number\" },\n          ],\n          values: data?.map((promise) => promise.value) || [],\n        }}\n      />\n      <Button onClick={() => history.push(\"/\")}>Back to Planets</Button>\n    </div>\n  );\n}\n\nexport default Residents;\n","import Component from \"./Residents\";\n\nexport default Component;\n","export default __webpack_public_path__ + \"static/media/space.516091e5.jpg\";","import Component from \"./NotFoundPage\";\n\nexport default Component;\n","import Bg from \"../../assets/space.jpg\";\nimport \"./NotFoundPage.css\";\n\nconst NotFoundPage = () => {\n  return (\n    <div className=\"not-found-page\" style={{ backgroundImage: `url(${Bg})` }}>\n      <h1>404</h1>\n      <p>Page not found</p>\n    </div>\n  );\n};\n\nexport default NotFoundPage;\n","import { useQuery } from \"react-query\";\n\nconst fetchProjects = (page = 0) =>\n  fetch(\"https://swapi.dev/api/planets?page=\" + page).then((res) => res.json());\n\nexport function usePlanetsQuery(page) {\n  return useQuery([\"planets\", Number(page)], () => fetchProjects(page), {\n    keepPreviousData: true,\n    staleTime: 1000 * 60 * 60 * 24 * 365,\n    cacheTime: 1000 * 60 * 60 * 24 * 365,\n  });\n}\n","import { Input, InputGroup, InputGroupText } from \"reactstrap\";\n\nexport function TextField({ children, type, placeholder, value, onChange }) {\n  return (\n    <InputGroup>\n      <InputGroupText>{placeholder}</InputGroupText>\n      <Input\n        multiple={type === \"select\"}\n        type={type}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n      >\n        {children}\n      </Input>\n    </InputGroup>\n  );\n}\n","import { TextField } from \"./TextField\";\n\nexport function FormField({ header, name, formik, children }) {\n  const value = formik.values[name];\n  const itype = header.find((h) => h.name === name)?.type || \"string\";\n  return (\n    <TextField\n      placeholder={name}\n      value={value}\n      type={itype}\n      onChange={(e) => {\n        let value1 = e.target.value;\n        console.log(value1);\n        formik.setFieldValue(name, value1);\n      }}\n    >\n      {children}\n    </TextField>\n  );\n}\n","import { FormGroup, Input, Label } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nexport function TerrainField(props) {\n  return (\n    <FormGroup>\n      <Label for=\"exampleSelectMulti\">Select Multiple</Label>\n      <Input\n        multiple\n        type=\"select\"\n        value={props.formik.values.terrain\n          .split(\",\")\n          .map((a) => a.replaceAll(\" \", \"\"))}\n        onChange={(e) => {\n          let opt;\n          let opts = [];\n          for (let i = 0, len = e.target.options.length; i < len; i++) {\n            opt = e.target.options[i];\n            if (opt.selected) {\n              opts.push(opt.value);\n            }\n          }\n          props.formik.setFieldValue(\"terrain\", opts.join(\",\"));\n        }}\n      >\n        {props.terrain.split(\",\").map((s) => (\n          <option key={s}>{s}</option>\n        ))}\n      </Input>\n    </FormGroup>\n  );\n}\n\nTerrainField.propTypes = {\n  formik: PropTypes.any,\n  terrain: PropTypes.any,\n};\n","import { Button, Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport { FormField } from \"./FormField\";\nimport { useEditPlanetFormik } from \"./useEditPlanetFormik\";\nimport { TerrainField } from \"./TerrainField\";\n\nfunction EditPlanetModal({ header, onClose, planet }) {\n  const formik = useEditPlanetFormik(planet, onClose);\n  return (\n    <Modal isOpen={planet !== undefined} toggle={onClose}>\n      <>\n        <ModalHeader toggle={onClose}>Edit {planet.name} Planet</ModalHeader>\n        <form onSubmit={formik.handleSubmit}>\n          <ModalBody>\n            <FormField header={header} formik={formik} name={\"name\"} />\n            <FormField\n              header={header}\n              formik={formik}\n              name={\"rotation_period\"}\n            />\n            <FormField\n              header={header}\n              formik={formik}\n              name={\"orbital_period\"}\n            />\n            <FormField header={header} formik={formik} name={\"diameter\"} />\n            <FormField header={header} formik={formik} name={\"climate\"} />\n            <FormField header={header} formik={formik} name={\"gravity\"} />\n            <TerrainField formik={formik} terrain={planet.terrain} />\n            <FormField header={header} formik={formik} name={\"surface_water\"} />\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Cancel</Button>\n            <Button\n              disabled={!(formik.isValid && formik.dirty)}\n              color=\"primary\"\n            >\n              Do Something\n            </Button>\n          </ModalFooter>\n        </form>\n      </>\n    </Modal>\n  );\n}\n\nEditPlanetModal.propTypes = {\n  planet: PropTypes.object,\n  onClose: PropTypes.func,\n};\n\nexport default EditPlanetModal;\n","import { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\n\nexport function useEditPlanetFormik(planet, onClose) {\n  return useFormik({\n    initialValues: planet,\n    validationSchema: Yup.object().shape({\n      name: Yup.string().required(),\n      rotation_period: Yup.string().required(),\n      orbital_period: Yup.string().required(),\n      diameter: Yup.string().required(),\n      climate: Yup.string().required(),\n      gravity: Yup.string().required(),\n      terrain: Yup.string().required(),\n      surface_water: Yup.string().required(),\n    }),\n    onSubmit: (editedPlanet, formikHelpers) => {\n      if (Math.random() > 0.5) {\n        alert(`[SUCCESS] ${JSON.stringify(editedPlanet)}`);\n        formikHelpers.resetForm();\n        onClose();\n        return;\n      }\n      alert(`[ERROR] ${JSON.stringify(editedPlanet)}`);\n      formikHelpers.resetForm();\n      onClose();\n    },\n  });\n}\n","import Grid from \"../Grid\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { usePlanetsQuery } from \"./usePlanetsQuery\";\nimport { Button, ButtonGroup, ButtonToolbar } from \"reactstrap\";\nimport EditPlanetModal from \"./EditPlanetModal/EditPlanetModal\";\nimport PropTypes from \"prop-types\";\nimport { allHeaders } from \"./allHeaders\";\nimport { allActions } from \"./allActions\";\n\nfunction Planets({ headers = [] }) {\n  const history = useHistory();\n  const [page, setPage] = useState(1);\n  const [planet, setPlanet] = useState(undefined);\n  const { data, isFetching } = usePlanetsQuery(page, setPage);\n  const header = allHeaders(headers);\n  const actions = allActions(history, setPlanet);\n  return (\n    <div className=\"App\">\n      <h1>Star Wars Planets</h1>\n      {planet !== undefined && (\n        <EditPlanetModal\n          planet={planet}\n          onClose={() => setPlanet(undefined)}\n          header={header}\n        />\n      )}\n      {isFetching ? (\n        <h2>Loading...</h2>\n      ) : (\n        <Grid data={{ header, values: data?.results || [], actions }} />\n      )}\n      <div>\n        <ButtonToolbar>\n          <ButtonGroup>\n            {Array.from({ length: data?.count / 10 }, (_, i) => i + 1).map(\n              (p) => (\n                <Button key={p} onClick={() => setPage(p)}>\n                  {p}\n                </Button>\n              )\n            )}\n          </ButtonGroup>\n        </ButtonToolbar>\n      </div>\n    </div>\n  );\n}\n\nPlanets.propTypes = {\n  headers: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      type: PropTypes.oneOf([\"number\", \"array\"]),\n    })\n  ),\n};\n\nexport default Planets;\n","import Component from \"./Planets\";\n\nexport default Component;\n","export function allHeaders(headers) {\n  return [\n    { name: \"name\" },\n    { name: \"rotation_period\", type: \"number\" },\n    { name: \"orbital_period\", type: \"number\" },\n    { name: \"diameter\", type: \"number\" },\n    { name: \"climate\" },\n    { name: \"gravity\" },\n    { name: \"terrain\" },\n    { name: \"surface_water\", type: \"number\" },\n    ...headers,\n  ];\n}\n","export function allActions(history, setPlanet) {\n  return [\n    {\n      label: \"Go to Films\",\n      show: (row) => row.films.length > 0,\n      action: (row) => {\n        console.log(`redirect to grid with ${row.films.length} Films`);\n        history.push(\"/films\", { films: row.films, name: row.name });\n      },\n    },\n    {\n      label: `Go to Residents`,\n      show: (row) => row.residents.length > 0,\n      action: (row) => {\n        let residents = row.residents;\n        console.log(`redirect to grid with ${residents.length} Residents`);\n        console.log(residents);\n        history.push(\"/residents\", {\n          residents: row.residents,\n          name: row.name,\n        });\n      },\n    },\n    {\n      label: \"Edit Planet\",\n      action: (row) => {\n        setPlanet(row);\n      },\n    },\n    {\n      label: \"Go to Planet\",\n      action: (row) => {\n        const split = row.url.split(\"/\");\n        const id = split[split.length - 2];\n        history.push(`/planet/${id}`);\n      },\n    },\n  ];\n}\n","import { useHistory, useParams } from \"react-router-dom\";\nimport React from \"react\";\nimport { usePlanetsQuery } from \"./usePlanetsQuery\";\nimport { Button } from \"reactstrap\";\n\nconst Planet = () => {\n  const { id } = useParams();\n  const { isLoading, data } = usePlanetsQuery(id);\n  const history = useHistory();\n  return isLoading ? (\n    <div>\n      <h2>loading planet</h2>\n    </div>\n  ) : (\n    <div>\n      <h2>{data.name}</h2>\n      <h4>Climate: {data.climate}</h4>\n      <Button onClick={() => history.push(\"/planets\")}>Back to Planets</Button>\n    </div>\n  );\n};\nexport default Planet;\n","import Component from \"./Planet\";\n\nexport default Component;\n","import { useQuery } from \"react-query\";\n\nexport function usePlanetsQuery(id) {\n  return useQuery([\"planet\", id], () =>\n    fetch(`https://swapi.dev/api/planets/${id}`).then((res) => res.json())\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Films from \"../components/Films\";\nimport Residents from \"../components/Residents\";\nimport NotFoundPage from \"../components/NotFoundPage\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport Planets from \"../components/Planets\";\nimport Planet from \"../components/Planet\";\n\nconst queryClient = new QueryClient({\n  refetchOnMount: false,\n  refetchOnReconnect: false,\n  refetchInterval: 1000000,\n  refetchOnWindowFocus: false,\n  refetchIntervalInBackground: 1000000,\n  staleTime: 1000 * 60 * 60 * 24 * 365,\n  cacheTime: 1000 * 60 * 60 * 24 * 365,\n});\n\nconst Router = () => {\n  useEffect(() => {\n    window.process = { ...window.process };\n  }, []);\n  return (\n    <QueryClientProvider client={queryClient}>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Planets} />\n          <Route\n            exact\n            path=\"/planets\"\n            render={(props) => (\n              <Planets\n                {...props}\n                headers={[\n                  { name: \"residents\", type: \"array\" },\n                  { name: \"films\", type: \"array\" },\n                ]}\n              />\n            )}\n          />\n          <Route exact path=\"/planet/:id\" component={Planet} />\n          <Route exact path=\"/films\" component={Films} />\n          <Route exact path=\"/residents\" component={Residents} />\n          <Route component={NotFoundPage} />\n        </Switch>\n      </BrowserRouter>\n    </QueryClientProvider>\n  );\n};\n\nexport default Router;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Routers from \"./routers\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routers />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}